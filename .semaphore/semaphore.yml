version: v1.0
name: Continuous Integration Pipelines
agent:
  machine:
    type: f1-standard-2
    os_image: ubuntu2004
  containers:
    - name: appium
      image: "appium/appium:latest"  # Official Appium Docker image
    - name: database
      image: 'registry.semaphoreci.com/postgres:11'

blocks:
  - name: Install Dependencies
    dependencies: []
    task:
      jobs:
        - name: Install Required Tools
          commands:
            - checkout
            - apt-get update
            - apt-get install -y curl wget unzip erlang openssh-client build-essential  # Install dependencies
            - echo "Erlang, OpenSSH, curl, and build tools installed successfully"
            
            # Manually install Erlang in case the `apt` package is not correct version
            - curl -sSL https://www.erlang.org/download/otp_src_24.0.4.tar.gz -o otp.tar.gz
            - tar -xzvf otp.tar.gz
            - cd otp_src_24.0.4
            - ./configure
            - make
            - sudo make install
            - cd ..  # Go back to previous directory
            - echo "Erlang installed successfully"

            # Install the 'when' CLI tool
            - curl -L https://github.com/when-cli/when/releases/download/v0.1.0/when-linux-x86_64 -o /usr/local/bin/when
            - chmod +x /usr/local/bin/when
            - echo "'when' CLI installed successfully"

            # Verify installation of all tools
            - which erl  # Verify Erlang installation
            - which ssh-agent  # Verify if ssh-agent is available
            - which ssh-keyscan  # Verify if ssh-keyscan is available
            - which ssh-add  # Verify if ssh-add is available
            - which curl  # Verify if curl is installed now
            - echo "All required tools are installed and available."

  - name: Setup Appium Emulator
    dependencies: []
    task:
      jobs:
        - name: Setup and Start Appium Emulator
          commands:
            - checkout
            - apt-get update
            - apt-get install -y openjdk-11-jdk curl wget unzip  # Install necessary Android tools
            - wget https://dl.google.com/android/repository/commandlinetools-linux-7302050_latest.zip
            - unzip commandlinetools-linux-7302050_latest.zip -d /usr/local/android
            - yes | /usr/local/android/cmdline-tools/bin/sdkmanager --sdk_root=/usr/local/android --licenses
            - /usr/local/android/cmdline-tools/bin/sdkmanager --sdk_root=/usr/local/android "platform-tools" "emulator" "system-images;android-29;google_apis;x86_64"
            - /usr/local/android/cmdline-tools/bin/avdmanager create avd -n test_avd -k "system-images;android-29;google_apis;x86_64" --device "Nexus 5X" --force
            - nohup /usr/local/android/emulator/emulator -avd test_avd -no-window -gpu swiftshader_indirect &  # Start emulator in background
            - adb wait-for-device  # Wait for the emulator to fully start
            - echo "Appium and Android Emulator are running."

  - name: Run Appium Test and Capture Screenshot
    dependencies:
      - Setup Appium Emulator
    task:
      jobs:
        - name: Run Appium Test
          commands:
            - echo "Running Appium test..."
            - appium &  # Start Appium server in background
            - sleep 10  # Ensure Appium has time to start up
            - node appium_test.js  # Run Appium test script
            - node capture_screenshot.js  # Capture screenshot using Appium
            - mv screenshot.png /tmp/screenshot.png  # Move screenshot to /tmp
            - artifact push job /tmp/screenshot.png  # Push screenshot as artifact

  - name: Clean up and Finalize
    dependencies:
      - Run Appium Test and Capture Screenshot
    task:
      jobs:
        - name: Clean up
          commands:
            - echo "Cleaning up... Removing temporary files."
            - rm -rf /tmp/screenshot.png  # Clean-up step after artifact is pushed
            - echo "Clean-up complete"
