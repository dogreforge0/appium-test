version: v1.0
name: Continuous Integration Pipelines
agent:
  machine:
    type: f1-standard-2
    os_image: ubuntu2004
  containers:
    - name: appium
      image: "rgonalo/appium-emulator"  # Use the Appium Emulator Docker image
    - name: database
      image: 'registry.semaphoreci.com/postgres:11'

blocks:
  - name: Install Dependencies
    dependencies: []
    task:
      jobs:
        - name: Install Required Tools
          commands:
            - checkout
            - apt-get update
            - apt-get install -y openjdk-11-jdk curl wget unzip erlang openssh-client  # Install missing dependencies
            - echo "Erlang, OpenSSH, and curl installed successfully"
            - export PATH=$PATH:/usr/bin  # Ensure correct path to binaries
            - which ssh-agent  # Check if ssh-agent is installed and available
            - which ssh-keyscan  # Check if ssh-keyscan is installed and available
            - which ssh-add  # Check if ssh-add is installed and available
            - which curl  # Check if curl is installed now
            - echo "SSH tools and curl are available, and the PATH is updated."

  - name: Setup Appium Emulator
    dependencies: []
    task:
      jobs:
        - name: Setup and Start Appium Emulator
          commands:
            - checkout
            - echo "Using Appium Emulator Docker image for testing"
            - echo "Appium and Emulator are already set up in the Docker image, so no further setup is required."

  - name: Run Appium Test and Capture Screenshot
    dependencies:
      - Setup Appium Emulator
    task:
      jobs:
        - name: Run Appium Test
          commands:
            - curl -sSL https://r2r.us/Appium/appium-install.sh | bash  # Install Appium if needed (this should be redundant)
            - appium &  # Start Appium server in the background (should already be running in the container, but adding for safety)
            - sleep 10  # Ensure Appium has time to start up
            - node appium_test.js  # Run the Appium test script
            - node capture_screenshot.js  # Capture screenshot using Appium
            - mv screenshot.png /tmp/screenshot.png  # Move screenshot to /tmp
            - artifact push job /tmp/screenshot.png  # Push screenshot as artifact

  - name: Clean up and Finalize
    dependencies:
      - Run Appium Test and Capture Screenshot
    task:
      jobs:
        - name: Clean up
          commands:
            - echo "Cleaning up... Removing temporary files."
            - rm -rf /tmp/screenshot.png  # Example clean-up step after artifact is pushed
            - echo "Clean-up complete"
